name: 'Called ADF Publish Action'
description: 'This action publishes the ARM template and other artifacts for Azure Data Factory'

inputs:
  adf-environment:
    description: 'The environment to deploy to (development, staging, production)'
    required: true
  adf-name:
    description: 'The name of the Azure Data Factory'
    required: true
  resource-group-name:
    description: 'The name of the resource group'
    required: true
  working-directory:
    description: 'The working directory of the Azure Data Factory'
    required: true
  working-directory-arm-parameters:
    description: 'The working directory of the ARM template parameters'
    required: true
  subscription-id:
    description: 'The subscription id'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v3.1.0

    - name: Setup node
      uses: actions/setup-node@v3.5.0
      with:
        node-version: '18.x'

    - name: Install npm package
      shell: bash
      working-directory: '${{ inputs.working-directory }}'
      run: npm install

    - name: Validate
      shell: bash
      working-directory: '${{ inputs.working-directory }}'
      run: npm run publish validate '${{ inputs.working-directory }}' '/subscriptions/${{ inputs.subscription-id }}/resourceGroups/${{ inputs.resource-group-name }}/providers/Microsoft.DataFactory/factories/${{ inputs.adf-name }}'

    - name: Generate ARM template
      shell: bash
      working-directory: '${{ inputs.working-directory }}'
      run: npm run publish export '${{ inputs.working-directory }}' '/subscriptions/${{ inputs.subscription-id }}/resourceGroups/${{ inputs.resource-group-name }}/providers/Microsoft.DataFactory/factories/${{ inputs.adf-name }}' 'ARMTemplateOutput'

    - name: Copying CICD ARM Template Parameter Files
      shell: bash
      run: cp -a '${{ inputs.working-directory-arm-parameters }}' '${{ inputs.working-directory }}/ARMTemplateOutput'

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3.1.0
      with:
        name: datafactory
        path: '${{ inputs.working-directory }}/ARMTemplateOutput'
        if-no-files-found: warn
